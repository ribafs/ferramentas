Criação de box para Vagrant com Ubuntu 18.04

Box criada de https://app.vagrantup.com/ubuntu/boxes/bionic64

Na minha máquina criei uma pasta para as boxes do Vagrant em:

/home/ribafs/vagrant

Então criei uma pasta para esta nova box em:

/home/ribafs/vagrant/ub1804min

vagrant init ubuntu/bionic64
vagrant up
vagrant ssh

Ao final da instalação automaticamente a box atualiza o sistema operacional.

Inicialmente a box exportada ficou com

518 MB após exportada

Executar:

reboot

Softwares Instalados:

    apache2 com mod_rewrite

    aptitude

    git

    mc (gerenciador de arquivos em modo texto)

    composer

    mcrypt

    curl

    mysql 5.7

    postgresql 10.8

    sqlite3

    nodejs 12 com npm

    adminer.php

Módulos do PHP:

    php7.2-bcmath php7.2-gd php7.2-mysql php7.2-pgsql php7.2-sqlite
    php-pear php7.2-xml php7.2-xsl php7.2-curl phpunit php-xdebug php7.2-intl
    php7.2-zip php7.2-mbstring php-gettext php-mbstring php7.2-fpm php-apcu php-memcache

Todos instalados com o script ub1804.sh

Apenas copiei o script ub1804.sh para a pasta /home/ribafs/vagrant/ub1804min no meu host, que é mapeada para /vagrant na box

Veja o conteúdo do script ub1804.sh em:

https://github.com/ribafs/cake-vagrant, na pasta scripts

Acessar a box com:

cd /home/ribafs/vagrant/ub1804min
Mudar o nome do hostname

vagrant up
vagrant ssh
sudo hostname ub18
exit
vagrant ssh

E executando:

vagrant up
vagrant ssh
cd /vagrant

Então executei o script com

sudo sh ub1804.sh

    Executei a primeira opção para atualizar
    Executei a segunda opção para instalar os pacotes
    Sai

Configurar o apache e o php:

sudo nano /etc/php/7.2/apache2/php.ini

Configurar a exibição de erros em desenvolvimento para mostrar as mensagens de eero:

display_errors = On)

Configurar apache

sudo nano /etc/apache2/apache2.conf

Adicionar a linha:

ServerName localhost

Trocar None por All, deixando assim

<Directory />
        Options FollowSymLinks
        AllowOverride All 
        Require all denied
</Directory>

<Directory /usr/share>
        AllowOverride All 
        Require all granted
</Directory>

<Directory /var/www/>
        Options Indexes FollowSymLinks
        AllowOverride All 
        Require all granted
</Directory>

Reiniciar apache

sudo service apache2 restart

Ajustes no MySQL

O mysql no Ubuntu 18.04 vem para apenas acesso com sudo. Ajustando isso:

Conectado na box execute:

sudo mysql -uroot
USE mysql;
UPDATE user SET plugin='mysql_native_password' WHERE User='root';
UPDATE user SET authentication_string=PASSWORD("root") WHERE User='root';
UPDATE user SET plugin="mysql_native_password" WHERE User='root';
FLUSH PRIVILEGES;
exit;

sudo service mysql restart

mysql -uroot -proot

Agora o MySQL tem:

- Login - root
- Senha - root

## Ajustes no PostgreSQL

Conectado na box
```php
sudo su
su - postgres
psql
alter role postgres password 'postgres';
\q
nano /etc/postgresql/10/main/pg_hba.conf

Mude esta linha
local   all             postgres                                peer

Para
local   all             postgres                                md5

Salve e feche
exit
service postgresql restart

Acesse o mysql com o adminer e acesse o postgres:

http://192.168.33.10/adminer.php
PostgreSQL

    Usuário - postgres
    Senha - postgres

Saia e acesse o mysql

http://192.168.33.10/adminer.php

    Login - root
    Senha - root

Copiar os scripts cake.sh e perms.sh do host para a pasta

/home/ribafs/vagrant/ub1804min:

Para que fiquem disponíveis na pasta /vagrant da box

Para ver o conteúdo dos scripts veja em

https://github.com/ribafs/cake-vagrant
Acessar a box:

vagrant up
vagrant ssh

cd /vagrant

Copiar na box os 3 scripts para a pasta scripts

mkdir /home/vagrant/scripts
Adicionando ao path

Copiar os dois scripts (cake.sh e perms.sh) para /usr/local/bin para que fiquem no path e estejam acessíveis de qualquer pasta com mais facilidade.

sudo cp cake.sh /usr/local/bin
sudo chmod +x /usr/local/bin/cake.sh

sudo cp perms.sh /usr/local/bin
sudo chmod +x /usr/local/bin/perms.sh

Criar alias cdv

nano ~/.bashrc

Adicione a linha abaixo:

alias cdv='cd /var/www/html'

Agora sempre que acessar a box e desejar ir para /var/www/html, basta executar

cdv

O cake.sh é para a criação de aplicativos CakePHP, assim:

cd /var/www/html (ou apenas cdv)
sudo perms.sh
cake.sh nomeaplicativo

O perms.sh serve para ajustar as permissões do /var/www/html, caso necessário. Usar assim:

Para ajustar todo o /var/www/html, apenas

sudo perms.sh

Para ajustar um subdiretório de /var/www/html digite

sudo perms.sh nomeSubdir
Adicionar user vagrant para o grupo www-data

sudo adduser vagrant www-data
Aumentar a memória RAM da box para 2048:

    Edite o Vagrantfile, alterando as linhas abaixo:

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
  end

Após qualquer alteração do Vagrantfile devemos executar:

vagrant up --provision
Exportar a box atual (ub1804min) como cake-vagrant-1.0.box:

vagrant package -o cake-vagrant-1.0.box

Agora podemos usar esta box para distribuir para colegas, oferecer para download num site, mas idealmente enviar para a nuvem no site do Vagrant:

https://app.vagrantup.com/session


Dicas sobre o Vagrant

Quando você começa a trabalhar com programação, é a principio normal que sua máquina fique um pouco bagunçada. Bibliotecas pra cá, interpretadores pra lá, compiladores ali, e assim vai. Depois de algum tempo, você até se encontra de forma que consegue usar tudo o que você mesmo colocou e dessa forma consegue fazer o que quer, ou seja, programar. O problema é quando você precisa efetivamente replicar este mesmo ambiente em outras máquinas, como a máquina dos seus colegas de trabalho, por exemplo, ou quando você por algum motivo perde todos os dados da máquina (como quando o HD resolve pifar, o que costuma acontecer com certa frequência, pelo que vejo).

O Vagrant é, em poucas palavras, uma ferramenta para criar e distribuir ambientes de desenvolvimento. Com esse propósito, sua real utilidade se mostra mais clara: Facilitar o trabalho do desenvolvedor no teste de suas aplicações, permitindo simular um ambiente mais fiel ao que será usado efetivamente em produção, além de permitir o compartilhamento deste ambiente com outros desenvolvedores. Tudo isso é feito com o uso de uma máquina virtual, que isola todo um hardware virtual a partir da sua máquina física real, além de permitir uso de sistema operacional e softwares próprios, por exemplo.

Um programador PHP, por exemplo, pode configurar a máquina para instalar o PHP, Apache e MySQL da mesma forma que este o faria em um servidor real. E, ainda: usando o mesmo sistema operacional do servidor real. Mas...qual a diferença entre usar o Virtualbox diretamente e o Vagrant, nesse caso? Bom, usando o Vagrant, o desenvolvedor consegue facilmente fazer configurações como redirecionamento de portas (importante para um programador que trabalha com web), sincronizar pastas entre a sua máquina física real e a máquina virtual de desenvolvimento e provisionar a máquina virtual automaticamente de acordo com a sua vontade. Tudo isso usando apenas alguns poucos arquivos de configuração e sem precisar repetir procedimentos frequentemente. No fim, o Vagrant se destaca pela facilidade de distribuição e manutenção das máquinas virtuais, garantindo assim um ambiente de desenvolvimento eficiente e fácil de replicar.

Crédito - https://fjorgemota.com/vagrant-maquinas-virtuais-automatizadas-para-desenvolvimento/
Dicas sobre o vagrant
Instalar o VirtualBox e o Extension Pack

https://www.virtualbox.org/wiki/Downloads
Instalar o git

    Linux - sudo apt install git
    Windows - https://git-scm.com/download/win

Instalar o Vagrant

http://vagrantup.com
Procurando por boxes na cloud:

https://app.vagrantup.com/boxes/search
Crie uma pasta para as boxes

mkdir /home/ribafs/vagrant
Criar uma pasta para a box cake-vagrant

mkdir /home/ribafs/vagrant/cake-vagrant
Instalar a box cake-vagrant:

cd /home/ribafs/vagrant
mkdir cake-vagrant
cd cake-vagrant
vagrant init ribafs/cake-vagrant --box-version 1.3
vagrant up

vagrant ssh-config

Adicionar para o Vagrantfile, caso não conecte do host para a box via ssh:

config.vm.provision :shell, :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"

Dicas encontrada em https://github.com/hashicorp/vagrant/issues/10280#issuecomment-437276971

Após editr o Vagrantfile execute:

vagrant reload
ssh vagrant@192.168.30.10
ou
ssh -p 2222@127.0.0.1
passwod: vagrant

Também podemos acessar pelo ambiente gráfico usando o nemo/nautilus no Linux ou o WinSCP no Windows

Servidor - 127.0.0.1
Porta - 2222
Pasta - /vagrant ou /var/www/html
Usuário - vagrant
Senha - vagrant

Executar comandos do SO ou scripts shell através do Vagrantfile, ver ao fnal:

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

vagrant status
ssh -p 2222 vagrant@localhost 'sudo shutdown -h now'
vagrant global-status
vagrant destroy 5d24c9b

### Levantar
vagrant up --provider=virtualbox

### Acessar a box instalada e upada
vahrant ssh

### Exportando uma box

cd /vagrant/boxnaome
vagrant box update
vagrant halt
vagrant package --output nome.box

Para corrigir problemas Instalar vghuest

vagrant plugin install vagrant-vbguest

cd /vagrant/boxname
vagrant box update

Adicionando nova rede

Editar o Vagrantfile e descomentar e ajustar a linha:

config.vm.network "private_network", ip: "192.168.33.10"

Com isso podemos acessar a box do host com:

http://192.168.33.10

ssh vagrant@192.168.33.10

scp arquivo.zip vagrant@192.168.33.10:/tmp

Mais detalhes em:
https://ribafs.github.io/cake-vagrant/

